import {
  ethers,
  ContractTransaction,
  BaseContract,
  toUtf8String,
  parseEther,
  solidityPacked,
} from "ethers";
import { baseConfig } from "../../config/index.js";
import { sendTransactionWithRetry } from "../index.js";

export const WVMockABI = [
  "constructor(address _address1, address _address2)",
  "function callFromContract(address addr, bytes payload) payable",
];

const WVMockByteCode =
  "0x60c060405234801561001057600080fd5b50604051610c92380380610c9283398101604081905261002f916100e9565b6100686000197f4dd0f6662ba1d6b081f08b350f5e9a6a7b15cf586926ba66f753594928fa64a66100cd60201b6105cd1790919060201c565b6001600160a01b03821661008f5760405163df9b0abf60e01b815260040160405180910390fd5b6001600160a01b0381166100b65760405163b1ad813960e01b815260040160405180910390fd5b6001600160a01b039182166080521660a052610123565b9055565b6001600160a01b03811681146100e657600080fd5b50565b600080604083850312156100fc57600080fd5b8251610107816100d1565b6020840151909250610118816100d1565b809150509250929050565b60805160a051610b2f6101636000396000818160a70152818161049901526105750152600081816101900152818161033001526103ba0152610b2f6000f3fe60806040526004361061007b5760003560e01c8063819d4cc61161004e578063819d4cc61461011b5780638980f11f1461013b5780638aa104351461015b5780638b21f1701461017e57600080fd5b80631287f63f146100805780632d2c5565146100955780633194528a146100e65780638129fc1c14610106575b600080fd5b61009361008e36600461091a565b6101b2565b005b3480156100a157600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f257600080fd5b5061009361010136600461099f565b610325565b34801561011257600080fd5b50610093610430565b34801561012757600080fd5b506100936101363660046109b8565b61043c565b34801561014757600080fd5b506100936101563660046109b8565b610508565b34801561016757600080fd5b5061017061059e565b6040519081526020016100dd565b34801561018a57600080fd5b506100c97f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0383166101ff5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b600080846001600160a01b0316345a90868660405161021f9291906109e4565b600060405180830381858888f193505050503d806000811461025d576040519150601f19603f3d011682016040523d82523d6000602084013e610262565b606091505b5091509150846001600160a01b03167f40256dac5c3d6e581525681a5dea64cb071f984fe1f6e261123ee19d8c58f85585853486866040516102a8959493929190610a50565b60405180910390a28161031e578051156102d6578060405162461bcd60e51b81526004016101f69190610aa8565b60405162461bcd60e51b815260206004820152601a60248201527f43616c6c206661696c656420776974686f757420726561736f6e00000000000060448201526064016101f6565b5050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461036e576040516325a81d7560e01b815260040160405180910390fd5b8061038c57604051631f2a200560e01b815260040160405180910390fd5b47808211156103b8576040516320dd33db60e11b815260048101839052602481018290526044016101f6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166378ffcfe2836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041357600080fd5b505af1158015610427573d6000803e3d6000fd5b50505050505050565b61043a60016105d1565b565b6040518181526001600160a01b0383169033907f6a30e6784464f0d1f4158aa4cb65ae9239b0fa87c7f2c083ee6dde44ba97b5e69060200160405180910390a36040516323b872dd60e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390528316906323b872dd90606401600060405180830381600087803b1580156104ec57600080fd5b505af1158015610500573d6000803e3d6000fd5b505050505050565b8061052657604051631f2a200560e01b815260040160405180910390fd5b6040518181526001600160a01b0383169033907faca8fb252cde442184e5f10e0f2e6e4029e8cd7717cae63559079610702436aa9060200160405180910390a361059a6001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083610603565b5050565b60006105c87f4dd0f6662ba1d6b081f08b350f5e9a6a7b15cf586926ba66f753594928fa64a65490565b905090565b9055565b6105d961059e565b156105f75760405163184e52a160e21b815260040160405180910390fd5b6106008161065a565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106559084906106b9565b505050565b6106837f4dd0f6662ba1d6b081f08b350f5e9a6a7b15cf586926ba66f753594928fa64a6829055565b6040518181527ffddcded6b4f4730c226821172046b48372d3cd963c159701ae1b7c3bcac541bb9060200160405180910390a150565b600061070e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661078b9092919063ffffffff16565b805190915015610655578080602001905181019061072c9190610abb565b6106555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f6565b606061079a84846000856107a4565b90505b9392505050565b6060824710156108055760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f6565b843b6108535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f6565b600080866001600160a01b0316858760405161086f9190610add565b60006040518083038185875af1925050503d80600081146108ac576040519150601f19603f3d011682016040523d82523d6000602084013e6108b1565b606091505b50915091506108c18282866108cc565b979650505050505050565b606083156108db57508161079d565b8251156108eb5782518084602001fd5b8160405162461bcd60e51b81526004016101f69190610aa8565b6001600160a01b038116811461060057600080fd5b60008060006040848603121561092f57600080fd5b833561093a81610905565b9250602084013567ffffffffffffffff8082111561095757600080fd5b818601915086601f83011261096b57600080fd5b81358181111561097a57600080fd5b87602082850101111561098c57600080fd5b6020830194508093505050509250925092565b6000602082840312156109b157600080fd5b5035919050565b600080604083850312156109cb57600080fd5b82356109d681610905565b946020939093013593505050565b8183823760009101908152919050565b60005b83811015610a0f5781810151838201526020016109f7565b83811115610a1e576000848401525b50505050565b60008151808452610a3c8160208601602086016109f4565b601f01601f19169290920160200192915050565b60808152846080820152848660a0830137600060a086830101526000601f19601f8701168201856020840152841515604084015260a0838203016060840152610a9c60a0820185610a24565b98975050505050505050565b60208152600061079d6020830184610a24565b600060208284031215610acd57600080fd5b8151801515811461079d57600080fd5b60008251610aef8184602087016109f4565b919091019291505056fea2646970667358221220475b031ddae4fa7b007517fc22f8c52f7793699d598ca5707ef6c3a4835c08f164736f6c63430008090033";

interface WVMockContract extends BaseContract {
  callFromContract(
    addr: string,
    payload: string,
    options?: { value?: string | bigint }
  ): Promise<ContractTransaction>;
}

async function deploy(
  rpcUrl: string,
  privateKey: string,
  lidoAddr: string,
  treasuryAddress: string
): Promise<WVMockContract> {
  const provider = new ethers.JsonRpcProvider(rpcUrl);
  const wallet = new ethers.Wallet(privateKey, provider);
  const factory = new ethers.ContractFactory(WVMockABI, WVMockByteCode, wallet);

  const contract = (await factory.deploy(
    lidoAddr,
    treasuryAddress
  )) as WVMockContract;
  await contract.deploymentTransaction()?.wait();

  return contract;
}

export function getWVContract(
  rpcUrl: string,
  privateKey: string,
  contractAddress: string
) {
  const provider = new ethers.JsonRpcProvider(rpcUrl);
  const wallet = new ethers.Wallet(privateKey, provider);

  const contract = new ethers.Contract(contractAddress, WVMockABI, wallet);

  const withdrawalRequest = async (
    pubkey: string,
    amount: string,
    fee: string
  ) => {
    const feeInWei = parseEther(fee);

    const amountInWei = parseEther(amount);
    const amountInGwei = amountInWei / 10n ** 9n;
    const amountBytes = solidityPacked(["uint64"], [amountInGwei]);

    const data = pubkey + amountBytes.slice(2);

    try {
      const tx = await contract.callFromContract(
        "0x0c15F14308530b7CDB8460094BbB9cC28b9AaaAA",
        data,
        { value: feeInWei, gasLimit: 2_000_000n }
      );

      await tx.wait();
      return tx;
    } catch (error: any) {
      console.error("Transaction failed:", error);
      if (error.data) {
        const reason = toUtf8String(error.data);
        console.error("Revert reason:", reason);
      }
      throw error;
    }
  };

  const consolidationRequest = async (
    sourcePubkey: string,
    targetPubkey: string,
    fee: string
  ) => {
    const feeInWei = parseEther(fee);
    const data = sourcePubkey + targetPubkey.slice(2);

    const tx = await contract.callFromContract(
      "0x00431F263cE400f4455c2dCf564e53007Ca4bbBb",
      data,
      { value: feeInWei, gasLimit: 2_000_000n }
    );
    await tx.wait();
    return tx;
  };

  return {
    contract,
    wallet,
    withdrawalRequest,
    consolidationRequest,
  };
}

export const deployWVMock = async (
  rpcUrl: string,
  privateKey: string,
  lidoAddr: string,
  treasuryAddress: string
) => {
  const contract = await deploy(rpcUrl, privateKey, lidoAddr, treasuryAddress);
  const methods = getWVContract(
    rpcUrl,
    privateKey,
    await contract.getAddress()
  );
  return methods;
};

export const waitEL = async (rpc: string) => {
  await sendTransactionWithRetry({
    amount: "1",
    privateKey: baseConfig.sharedWallet[0].privateKey,
    providerUrl: rpc,
    toAddress: "0xf93Ee4Cf8c6c40b329b0c0626F28333c132CF241",
  });
};
